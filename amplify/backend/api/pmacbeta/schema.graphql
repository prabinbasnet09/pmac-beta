type User
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["Admin", "ChairCommittee"] }
      { allow: groups, groups: ["Faculty"], operations: [create, read, update] }
      { allow: owner, ownerField: "username", operations: [read, update] }
    ]
  ) { # FOR TESTING ONLY!
  id: ID!
  username: String!
  email: String!
  name: String!
  groups: [String!]!
  verified: Boolean!
  profilePicture: String
  facultyRecommendation: [String!] # 2 Faculty recommendation form, should be in array
  personalStatement: String
  transcript: String
  amcasForm: String
}

type ApplicantForm
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Admin", "ChairCommittee", "Faculty"]
        operations: [read]
      }
      { allow: owner, ownerField: "userId", operations: [create, read, update] }
    ]
  ) {
  userId: String! @primaryKey
  firstName: String!
  lastName: String!
  date: String!
  cwid: String!
  cellPhone: String!
  country: String!
  streetAddress: String!
  city: String!
  state: String!
  zipCode: String!
  email: String!
  alternativeEmail: String!
  major: [String!]!
  minor: [String!]
  gpa: Float!
  expectedGraduation: String!
  entranceDate: String!
  entryExams: [AWSJSON!]
  examDate: String!
  facultyEvaluators: [AWSJSON!]
  involvement: [AWSJSON!]
  workExperience: [AWSJSON!]
  fieldExperience: [AWSJSON!]
  honors: [AWSJSON!]
  labResearch: [AWSJSON!]
  volunteer: [AWSJSON!]
}

type ApplicantReleaseForm
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Faculty", "Admin", "ChairCommittee"]
        operations: [read]
      }
      { allow: owner, ownerField: "userId", operations: [create, read, update] }
    ]
  ) {
  userId: String! @primaryKey
  authorizeRelease: Boolean!
  allowEvaluation: Boolean!
  allowAdvertising: Boolean!
  fullName: String!
  cwid: String!
  signature: String!
  date: String!
  schoolDetails: [AWSJSON!]
}

type FacultyRecommendationForm
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["Faculty"], operations: [create, read, update] }
      { allow: groups, groups: ["ChairCommittee"], operations: [read] }
      { allow: owner, ownerField: "userId", operations: [read] }
    ]
  ) {
  userId: String! @primaryKey
  applicantName: String!
  signature: String!
  evaluatorName: String!
  applicantObservation: String!
  applicantStrength: String!
  applicantWeakness: String!
  applicantPotential: String!
  additionalComments: String!
  evaluatorSignature: String!
  date: String!
}

type Query {
  getStudentDocuments(id: ID!): User
}

type Mutation {
  onVerifyUser(input: VerifyUserInput!): User
  changePersonalStatement(input: ChangePersonalStatementInput!): User
  changeFileURL(input: ChangeFileURLInput!): User
  changeTranscript(input: ChangeTranscriptInput!): User
  changeProfilePicture(input: ChangeProfilePictureInput!): User
}

input ChangeFileURLInput {
  id: ID!
  fileURL: [String!]
}

input VerifyUserInput {
  id: ID!
  verified: Boolean!
}

input ChangePersonalStatementInput {
  id: ID!
  personalStatement: String!
}

input ChangeTranscriptInput {
  id: ID!
  transcript: String!
}

input ChangeProfilePictureInput {
  id: ID!
  profilePicture: String!
}
